filter(p_race!="") %>%
bind_rows(dat_rac)
dat %>%
filter(is.null(p_gender))
unique(dat$p_gender)
dat %>% filter(is.null(p_race))
unique(dat$p_race)
?is.null
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(multicon)
library(tm)
library(lubridate)
library(survival)
library(survminer)
# Plot objects
c <- "orange"
s <- 3
w <- 0.1
h <- 0.1
plot_trials <- list(xlab("Number of trials voluntarily completed"),
scale_x_continuous(breaks = 1:7))
plot_post_interest <- list(xlab("Post-test interest in activity (1 = Strongly dislike, 6 = Strongly like)"),
scale_x_discrete(breaks = 0:6, labels = 0:6, limits = 0:6))
orange_jitter <- geom_jitter(color = c, size = s, width = w, height = h)
jitter <- geom_jitter(width = w, height = h)
alpha_point <- geom_point(color = c, size = s, alpha = 0.5)
fct_neither_order <- c("Strongly disagree",
"Somewhat disagree",
"Neither agree nor disagree",
"Somewhat agree",
"Strongly agree")
dat <- read.csv("060421.csv")
pre <- read.csv("060421_pre.csv")
names(dat) <- c("delete", "time", "delete", "progress", "seconds", "delete", "delete", "delete", "delete", "delete", "id", "pre_interest_act", "pre_like_act", "pre_useful_act", "pre_relevant_act", "pre_feeling", "pre_feeling_long", "pre_enjoy_cs", "pre_learn_cs", "pre_course_cs", "pre_interest_cs", "pre_excite_cs", "pre_conf_cs", "pre_conf_act", "delete", "delete", "time_1", "delete", "choice_1", "delete", "delete", "time_2", "delete", "choice_2", "delete", "delete", "time_3", "delete", "choice_3", "delete", "delete", "time_4", "delete", "choice_4", "delete", "delete", "time_5", "delete", "choice_5", "delete", "delete", "delete", "time_6", "delete", "choice_6", "delete", "delete", "delete", "time_7", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "stereotype", "p_female", "p_black", "p_aapi", "p_latino", "p_white", "p_other", "switched", "why_switch", "why_stay", "post_interest_act", "post_like_act", "post_useful_act", "post_relevant_act", "cs_xp", "why_cs_course", "why_no_cs_course", "likely_cs_course", "likely_cs_job", "likely_learn_cs", "future_long", "r_att", "r_att_long", "post_interest_cs", "post_excite_cs", "post_conf_cs", "post_conf_act", "post_belonging", "post_difficult", "post_opp_cost", "post_stress", "post_time_cost", "post_growth", "post_fixed1", "post_fixed2", "post_fixed3", "fit_cs_class", "fit_cs_job", "fit_cs_skill", "fit_cs_teach", "fit_cs_major", "relative_effort", "relative_difficult", "relative_school", "year", "hs_usa", "hs_int", "age", "gpa", "major", "transfer", "employ", "help", "model_similar", "model_respect", "model_friendly", "model_like", "model_long", "fem_exposure", "race_exposure", "delete", "parents_fem", "friends_fem", "delete", "delete", "parents_race", "friends_race", "friends_cs", "mom_cs", "dad_cs", "delete", "delete", "delete", "delete", "model_gender", "model_race", "p_gender", "p_race", "delete", "condition", "delete", "delete", "img", "delete")
dat <- dat %>%
select(-delete, -matches("choice")) %>%
tail(nrow(dat) - 2)
View(dat)
# Convert time intervals and gpas to double
for (i in seq_along(dat)) {
if (str_detect(names(dat[i]), "time_\\d")) {
dat[,i] <- as.numeric(dat[,i])
}
}
dat <- dat %>%
mutate(seconds = as.numeric(seconds),
time = parse_datetime(time),
gpa = as.numeric(gpa))
# Likert function
likert <- function(col){
# Protect long-response answers that may inadvertently match the Likert cue terms
if (sum(str_detect(col, "^Neither"), na.rm = TRUE) > 0) {
lbls <- c(1:5)
lvls <- c("Strongly disagree", "Somewhat disagree", "Neither agree nor disagree", "Somewhat agree", "Strongly agree")
factor(col, lvls, lbls)
}
else if (length(unique(col)) < 7) {
lbls <- c(1:6)
if (sum(str_detect(col, "agree$"), na.rm = TRUE) > 0){
lvls <- c("Strongly disagree", "Disagree", "Somewhat disagree", "Somewhat agree", "Agree", "Strongly agree")
} else if (sum(str_detect(col, "[Nn]egative$|[Pp]ositive"), na.rm = TRUE) > 0){
lvls <- c("Strongly negative", "Negative", "Somewhat negative", "Somewhat positive", "Positive", "Strongly positive")
} else if (sum(str_detect(col, "likely$"), na.rm = TRUE) > 0){
lvls <- c("Very unlikely", "Unlikely", "Somewhat unlikely", "Somewhat likely", "Likely", "Strongly likely")
} else {
return(col)
}
factor(col, lvls, lbls)
} else {
col
}
}
# try case_when, refactor
# Convert Likert items to factors
for (i in seq_along(dat)) {
dat[[i]] <- likert(dat[[i]])
}
nm <- dat %>%
select(matches("fit"),
-matches("long"),
matches("relative"),
switched,
cs_xp) %>%
names()
dat <- mutate_at(dat, nm, ~ case_when(. == "1 = Not at all similar" ~ 1,
. == "1 = A lot less" ~ 1,
. == "2" ~ 2,
. == "3" ~ 3,
. == "4" ~ 4,
. == "5" ~ 5,
. == "6 = Very similar or the same" ~ 6,
. == "6 = A lot more" ~ 6,
. == "Yes" ~ 1,
. == "No" ~ 0))
dat <- dat %>%
filter(model_gender != 6,
model_race != "")
fix_gender <- function (model_gender, condition)  {
if (condition=="db"|condition=="dg") {
if (model_gender==1) {
2
} else {
1
}
} else if (condition=="dr"|condition=="na") {
model_gender
}
}
dat_gen <- dat %>%
filter(p_gender=="") %>%
mutate(p_gender = as.character(map2(model_gender, condition, fix_gender)))
dat <- dat %>%
filter(p_gender!="") %>%
bind_rows(dat_gen)
fix_race <- function (model_race, condition)  {
if (condition=="na"|condition=="dg") {
model_race
} else {
NA
}
}
dat_rac <- dat %>%
filter(p_race=="") %>%
mutate(p_race = as.character(map2(model_race, condition, fix_race)))
dat <- dat %>%
filter(p_race!="") %>%
bind_rows(dat_rac)
clean_rac <- function (race) {
factor(race,
levels = unique(race),
labels = c("latino", "asian", "white", "black"))
}
#         ifany = TRUE)
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female"))
}
#         ifany = TRUE)
dat <- dat %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
img = paste(model_race, model_gender, sep = " ")
)
#         p_gender = clean_gen(p_gender),
#
clean_rac <- function (race) {
factor(race,
levels = unique(race),
labels = c("latino", "asian", "white", "black"))
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female"))
}
dat <- dat %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
img = paste(model_race, model_gender, sep = " ")
)
?factor
unique(dat$p_gender)
clean_rac <- function (race) {
if (unique(race)==4) {
labs = c("latino", "asian", "white", "black")
} else {
labs = c("unknown", "latino", "asian", "white", "black")
}
factor(race,
levels = unique(race),
labels = labs
)
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female")
)
}
dat <- dat %>%
filter(p_gender!="0") %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
img = paste(model_race, model_gender, sep = " ")
)
clean_rac <- function (race) {
if (length(unique(race))==4) {
labs = c("latino", "asian", "white", "black")
} else {
labs = c("unknown", "latino", "asian", "white", "black")
}
factor(race,
levels = unique(race),
labels = labs
)
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female")
)
}
dat <- dat %>%
filter(p_gender!="0") %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
img = paste(model_race, model_gender, sep = " ")
)
clean_rac <- function (race) {
if (length(unique(race))s==4) {
clean_rac <- function (race) {
if (length(unique(race))==4) {
labs = c("latino", "asian", "white", "black")
} else {
labs = c("unknown", "latino", "asian", "white", "black")
}
factor(race,
levels = unique(race),
labels = labs
)
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female")
)
}
dat <- dat %>%
filter(p_gender!="0") %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
p_race = clean_rac(p_race),
img = paste(model_race, model_gender, sep = " ")
)
rm(dat_gen)
rm(dat_rac)
rm(dat5)
clean_rac <- function (race) {
if (length(unique(race))==4) {
labs = c("latino", "asian", "white", "black")
} else {
labs = c("unknown", "latino", "asian", "white", "black")
}
factor(race,
levels = unique(race),
labels = labs
)
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female")
)
}
dat <- dat %>%
#we delete nonbinary participants who should have been screened out of the study
filter(p_gender!="0") %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
p_race = clean_rac(p_race),
img = paste(model_race, model_gender, sep = " ")
)
dat %>%
ggplot(aes(p_race)) +
geom_bar() +
coord_flip()
count(dat, p_race)
prop.table(table(dat$p_race))
dat %>%
filter(p_gender == "female" | p_gender == "male") %>%
ggplot(aes(p_gender)) +
geom_bar()
count(dat, p_gender)
prop.table(table(dat$p_gender))
count(dat, p_race)
prop.table(table(dat$p_race))
count(dat, p_gender)
prop.table(table(dat$p_gender))
count(pre, race)
prop.table(table(pre$race))
count(pre, gender)
prop.table(table(pre$gender))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(multicon)
library(tm)
library(lubridate)
library(survival)
library(survminer)
# Plot objects
c <- "orange"
s <- 3
w <- 0.1
h <- 0.1
plot_trials <- list(xlab("Number of trials voluntarily completed"),
scale_x_continuous(breaks = 1:7))
plot_post_interest <- list(xlab("Post-test interest in activity (1 = Strongly dislike, 6 = Strongly like)"),
scale_x_discrete(breaks = 0:6, labels = 0:6, limits = 0:6))
orange_jitter <- geom_jitter(color = c, size = s, width = w, height = h)
jitter <- geom_jitter(width = w, height = h)
alpha_point <- geom_point(color = c, size = s, alpha = 0.5)
fct_neither_order <- c("Strongly disagree",
"Somewhat disagree",
"Neither agree nor disagree",
"Somewhat agree",
"Strongly agree")
dat <- read.csv("060421.csv")
pre <- read.csv("060421_pre.csv")
names(dat) <- c("delete", "time", "delete", "progress", "seconds", "delete", "delete", "delete", "delete", "delete", "id", "pre_interest_act", "pre_like_act", "pre_useful_act", "pre_relevant_act", "pre_feeling", "pre_feeling_long", "pre_enjoy_cs", "pre_learn_cs", "pre_course_cs", "pre_interest_cs", "pre_excite_cs", "pre_conf_cs", "pre_conf_act", "delete", "delete", "time_1", "delete", "choice_1", "delete", "delete", "time_2", "delete", "choice_2", "delete", "delete", "time_3", "delete", "choice_3", "delete", "delete", "time_4", "delete", "choice_4", "delete", "delete", "time_5", "delete", "choice_5", "delete", "delete", "delete", "time_6", "delete", "choice_6", "delete", "delete", "delete", "time_7", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "delete", "stereotype", "p_female", "p_black", "p_aapi", "p_latino", "p_white", "p_other", "switched", "why_switch", "why_stay", "post_interest_act", "post_like_act", "post_useful_act", "post_relevant_act", "cs_xp", "why_cs_course", "why_no_cs_course", "likely_cs_course", "likely_cs_job", "likely_learn_cs", "future_long", "r_att", "r_att_long", "post_interest_cs", "post_excite_cs", "post_conf_cs", "post_conf_act", "post_belonging", "post_difficult", "post_opp_cost", "post_stress", "post_time_cost", "post_growth", "post_fixed1", "post_fixed2", "post_fixed3", "fit_cs_class", "fit_cs_job", "fit_cs_skill", "fit_cs_teach", "fit_cs_major", "relative_effort", "relative_difficult", "relative_school", "year", "hs_usa", "hs_int", "age", "gpa", "major", "transfer", "employ", "help", "model_similar", "model_respect", "model_friendly", "model_like", "model_long", "fem_exposure", "race_exposure", "delete", "parents_fem", "friends_fem", "delete", "delete", "parents_race", "friends_race", "friends_cs", "mom_cs", "dad_cs", "delete", "delete", "delete", "delete", "model_gender", "model_race", "p_gender", "p_race", "delete", "condition", "delete", "delete", "img", "delete")
dat <- dat %>%
select(-delete, -matches("choice")) %>%
tail(nrow(dat) - 2)
View(dat)
# Convert time intervals and gpas to double
for (i in seq_along(dat)) {
if (str_detect(names(dat[i]), "time_\\d")) {
dat[,i] <- as.numeric(dat[,i])
}
}
dat <- dat %>%
mutate(seconds = as.numeric(seconds),
time = parse_datetime(time),
gpa = as.numeric(gpa))
# Likert function
likert <- function(col){
# Protect long-response answers that may inadvertently match the Likert cue terms
if (sum(str_detect(col, "^Neither"), na.rm = TRUE) > 0) {
lbls <- c(1:5)
lvls <- c("Strongly disagree", "Somewhat disagree", "Neither agree nor disagree", "Somewhat agree", "Strongly agree")
factor(col, lvls, lbls)
}
else if (length(unique(col)) < 7) {
lbls <- c(1:6)
if (sum(str_detect(col, "agree$"), na.rm = TRUE) > 0){
lvls <- c("Strongly disagree", "Disagree", "Somewhat disagree", "Somewhat agree", "Agree", "Strongly agree")
} else if (sum(str_detect(col, "[Nn]egative$|[Pp]ositive"), na.rm = TRUE) > 0){
lvls <- c("Strongly negative", "Negative", "Somewhat negative", "Somewhat positive", "Positive", "Strongly positive")
} else if (sum(str_detect(col, "likely$"), na.rm = TRUE) > 0){
lvls <- c("Very unlikely", "Unlikely", "Somewhat unlikely", "Somewhat likely", "Likely", "Strongly likely")
} else {
return(col)
}
factor(col, lvls, lbls)
} else {
col
}
}
# try case_when, refactor
# Convert Likert items to factors
for (i in seq_along(dat)) {
dat[[i]] <- likert(dat[[i]])
}
nm <- dat %>%
select(matches("fit"),
-matches("long"),
matches("relative"),
switched,
cs_xp) %>%
names()
dat <- mutate_at(dat, nm, ~ case_when(. == "1 = Not at all similar" ~ 1,
. == "1 = A lot less" ~ 1,
. == "2" ~ 2,
. == "3" ~ 3,
. == "4" ~ 4,
. == "5" ~ 5,
. == "6 = Very similar or the same" ~ 6,
. == "6 = A lot more" ~ 6,
. == "Yes" ~ 1,
. == "No" ~ 0))
dat <- dat %>%
filter(model_gender != 6,
model_race != "")
fix_gender <- function (model_gender, condition)  {
if (condition=="db"|condition=="dg") {
if (model_gender==1) {
2
} else {
1
}
} else if (condition=="dr"|condition=="na") {
model_gender
}
}
dat_gen <- dat %>%
filter(p_gender=="") %>%
mutate(p_gender = as.character(map2(model_gender, condition, fix_gender)))
dat <- dat %>%
filter(p_gender!="") %>%
bind_rows(dat_gen)
fix_race <- function (model_race, condition)  {
if (condition=="na"|condition=="dg") {
model_race
} else {
NA
}
}
dat_rac <- dat %>%
filter(p_race=="") %>%
mutate(p_race = as.character(map2(model_race, condition, fix_race)))
dat <- dat %>%
filter(p_race!="") %>%
bind_rows(dat_rac)
rm(dat_gen)
rm(dat_rac)
clean_rac <- function (race) {
if (length(unique(race))==4) {
labs = c("latino", "asian", "white", "black")
} else {
labs = c("unknown", "latino", "asian", "white", "black")
}
factor(race,
levels = unique(race),
labels = labs
)
}
clean_gen <- function (gender) {
factor(gender,
levels = unique(gender),
labels = c("male", "female")
)
}
dat <- dat %>%
#we delete nonbinary participants who should have been screened out of the study
filter(p_gender!="0") %>%
mutate(model_gender = clean_gen(model_gender),
model_race = clean_rac(model_race),
p_gender = clean_gen(p_gender),
p_race = clean_rac(p_race),
img = paste(model_race, model_gender, sep = " ")
)
# Remove dummy rows
pre <- pre %>%
tail(nrow(pre) - 2)
pre <- pre %>%
select(race, gender, major, Gender, Race) %>%
filter(Race != "",
Gender != "",
Race != "5",
Gender != "3") %>%
mutate(Race = as.numeric(Race),
Gender = as.numeric(Gender),
race = factor(Race, levels = unique(Race), labels = unique(race)),
gender = factor(Gender, levels = unique(Gender), labels = unique(gender)))
times <- names(select(dat, matches("^time_\\d")))
dat$persist <- rowSums(!is.na(dat[times]))
# Binary coding of whether students chose to stop after the first trial (most significant dropoff point)
dat$dropoff <- dat$persist < 2
#Define function for cleaning majors
clean_major <- function(col) {
col %>%
tolower() %>%
str_replace("pre|[\\w ]*ing in ", "") %>%
str_replace("-", "") %>%
str_replace("&", "and") %>%
str_replace("human biology and society", "human biology & society") %>%
str_replace("world arts and cultures", "world arts & cultures") %>%
str_replace("[\\w, ]*developmental[\\w, ]*|mcdb", "molecular cellular & developmental biology") %>%
str_replace("microbiology[\\w, ]*|mimg", "microbiology immunology & molecular genetics") %>%
str_replace("comm[\\w]*", "communications") %>%
str_replace("poli[\\w,\\- ]*", "political science") %>%
str_replace("socio[\\w]*", "sociology") %>%
str_replace("neuro\\w*", "neuroscience") %>%
str_replace("cog[\\w ]*", "cognitive science") %>%
str_replace("anthro[\\w\\. ]*", "anthropology") %>%
str_replace("spanish and linguistics[\\w ]*", "spanish and linguistics") %>%
str_replace("computer eng\\w*", "computer engineering") %>%
str_replace("phys[\\w ]*", "physiological science") %>%
str_replace("psychobio\\w*", "psychobiology") %>%
str_replace("psycholog\\w*|psych\\b", "psychology") %>%
str_replace("un\\w* social \\w*", "undeclared social sciences") %>%
str_replace("general biology", "biology") %>%
str_replace("thinking about majoring in economics also", "") %>%
str_trim()
}
# Clean majors for pre-survey questions
pre$major <- clean_major(pre$major)
# Clean majors for study questions
dat$major <- clean_major(dat$major)
# Pre-survey
str_split(pre$major, " and |, | or ") %>%
unlist() %>%
data.frame() %>%
ggplot(aes(.)) +
geom_bar() +
coord_flip()
# Main survey
dat_major <- str_split(dat$major, " and |, | or ") %>%
unlist() %>%
data.frame()
names(dat_major) <- "major"
dat_major %>%
group_by(major) %>%
summarize(n = n()) %>%
filter(n > 1) %>%
ggplot(aes(reorder(major, n),n)) +
geom_bar(stat = "identity") +
coord_flip()
count(dat, p_race)
prop.table(table(dat$p_race))
count(dat, p_gender)
prop.table(table(dat$p_gender))
count(pre, race)
prop.table(table(pre$race))
count(pre, gender)
prop.table(table(pre$gender))
